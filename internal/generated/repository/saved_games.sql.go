// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: saved_games.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSavedGame = `-- name: DeleteSavedGame :exec
DELETE FROM saved_games
WHERE user_id = $1 AND game_id = $2
`

type DeleteSavedGameParams struct {
	UserID uuid.UUID
	GameID uuid.UUID
}

func (q *Queries) DeleteSavedGame(ctx context.Context, arg DeleteSavedGameParams) error {
	_, err := q.db.Exec(ctx, deleteSavedGame, arg.UserID, arg.GameID)
	return err
}

const getSavedGame = `-- name: GetSavedGame :one
SELECT id, user_id, game_id, created_at, updated_at FROM saved_games
WHERE id = $1
`

func (q *Queries) GetSavedGame(ctx context.Context, id uuid.UUID) (SavedGame, error) {
	row := q.db.QueryRow(ctx, getSavedGame, id)
	var i SavedGame
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSavedGamesByUser = `-- name: ListSavedGamesByUser :many
SELECT sg.id, sg.user_id, sg.game_id, sg.created_at, sg.updated_at, g.title, g.description, g.release_date
FROM saved_games sg
         JOIN games g ON sg.game_id = g.id
WHERE sg.user_id = $1
ORDER BY sg.created_at DESC
`

type ListSavedGamesByUserRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	GameID      uuid.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Title       string
	Description pgtype.Text
	ReleaseDate pgtype.Date
}

func (q *Queries) ListSavedGamesByUser(ctx context.Context, userID uuid.UUID) ([]ListSavedGamesByUserRow, error) {
	rows, err := q.db.Query(ctx, listSavedGamesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSavedGamesByUserRow
	for rows.Next() {
		var i ListSavedGamesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GameID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveGame = `-- name: SaveGame :one
INSERT INTO saved_games (user_id, game_id)
VALUES ($1, $2)
    ON CONFLICT (user_id, game_id) DO NOTHING
RETURNING id, user_id, game_id, created_at, updated_at
`

type SaveGameParams struct {
	UserID uuid.UUID
	GameID uuid.UUID
}

func (q *Queries) SaveGame(ctx context.Context, arg SaveGameParams) (SavedGame, error) {
	row := q.db.QueryRow(ctx, saveGame, arg.UserID, arg.GameID)
	var i SavedGame
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
