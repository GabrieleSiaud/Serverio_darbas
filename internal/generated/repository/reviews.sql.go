// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reviews.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (game_id, user_id, rating, comment)
VALUES ($1, $2, $3, $4)
    ON CONFLICT (user_id, game_id) DO UPDATE
                                          SET rating = EXCLUDED.rating,
                                          comment = EXCLUDED.comment,
                                          updated_at = NOW()
                                          RETURNING review_id, game_id, user_id, rating, comment, created_at, updated_at
`

type CreateReviewParams struct {
	GameID  uuid.UUID   `json:"game_id"`
	UserID  uuid.UUID   `json:"user_id"`
	Rating  int16       `json:"rating"`
	Comment pgtype.Text `json:"comment"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.GameID,
		arg.UserID,
		arg.Rating,
		arg.Comment,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.GameID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE review_id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, reviewID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteReview, reviewID)
	return err
}

const getReview = `-- name: GetReview :one
SELECT review_id, game_id, user_id, rating, comment, created_at, updated_at FROM reviews
WHERE review_id = $1
`

func (q *Queries) GetReview(ctx context.Context, reviewID uuid.UUID) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.GameID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReviewsByGame = `-- name: ListReviewsByGame :many
SELECT r.review_id, r.rating, r.comment, r.created_at, u.username
FROM reviews r
         JOIN users u ON r.user_id = u.id
WHERE r.game_id = $1
ORDER BY r.created_at DESC
`

type ListReviewsByGameRow struct {
	ReviewID  uuid.UUID          `json:"review_id"`
	Rating    int16              `json:"rating"`
	Comment   pgtype.Text        `json:"comment"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Username  string             `json:"username"`
}

func (q *Queries) ListReviewsByGame(ctx context.Context, gameID uuid.UUID) ([]ListReviewsByGameRow, error) {
	rows, err := q.db.Query(ctx, listReviewsByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReviewsByGameRow
	for rows.Next() {
		var i ListReviewsByGameRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReviewsByUser = `-- name: ListReviewsByUser :many
SELECT r.review_id, r.rating, r.comment, r.created_at, g.title
FROM reviews r
         JOIN games g ON r.game_id = g.id
WHERE r.user_id = $1
ORDER BY r.created_at DESC
`

type ListReviewsByUserRow struct {
	ReviewID  uuid.UUID          `json:"review_id"`
	Rating    int16              `json:"rating"`
	Comment   pgtype.Text        `json:"comment"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Title     string             `json:"title"`
}

func (q *Queries) ListReviewsByUser(ctx context.Context, userID uuid.UUID) ([]ListReviewsByUserRow, error) {
	rows, err := q.db.Query(ctx, listReviewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReviewsByUserRow
	for rows.Next() {
		var i ListReviewsByUserRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
