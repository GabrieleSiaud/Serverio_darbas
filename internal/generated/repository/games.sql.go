// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: games.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (title, description, release_date)
VALUES ($1, $2, $3)
    RETURNING id, title, description, release_date, created_at, updated_at
`

type CreateGameParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ReleaseDate pgtype.Date `json:"release_date"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Title, arg.Description, arg.ReleaseDate)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, title, description, release_date, created_at, updated_at FROM games
WHERE id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, title, description, release_date, created_at, updated_at FROM games
ORDER BY created_at DESC
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET title = $2,
    description = $3,
    release_date = $4,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, title, description, release_date, created_at, updated_at
`

type UpdateGameParams struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ReleaseDate pgtype.Date `json:"release_date"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, updateGame,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ReleaseDate,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
