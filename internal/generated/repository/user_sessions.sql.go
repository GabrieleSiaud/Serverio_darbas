// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_sessions.sql

package repository

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (user_id, session_token, jwt_token_id, device_info, ip_address, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING session_id, user_id, session_token, jwt_token_id, device_info, ip_address, expires_at, created_at, last_used_at
`

type CreateSessionParams struct {
	UserID       uuid.UUID
	SessionToken string
	JwtTokenID   pgtype.Text
	DeviceInfo   pgtype.Text
	IpAddress    *netip.Addr
	ExpiresAt    pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.SessionToken,
		arg.JwtTokenID,
		arg.DeviceInfo,
		arg.IpAddress,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.SessionToken,
		&i.JwtTokenID,
		&i.DeviceInfo,
		&i.IpAddress,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions
WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, sessionID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT session_id, user_id, session_token, jwt_token_id, device_info, ip_address, expires_at, created_at, last_used_at FROM user_sessions
WHERE session_token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, sessionToken)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.SessionToken,
		&i.JwtTokenID,
		&i.DeviceInfo,
		&i.IpAddress,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT session_id, user_id, session_token, jwt_token_id, device_info, ip_address, expires_at, created_at, last_used_at FROM user_sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListSessionsByUser(ctx context.Context, userID uuid.UUID) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, listSessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSession
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.SessionToken,
			&i.JwtTokenID,
			&i.DeviceInfo,
			&i.IpAddress,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionLastUsed = `-- name: UpdateSessionLastUsed :one
UPDATE user_sessions
SET last_used_at = NOW()
WHERE session_id = $1
    RETURNING session_id, user_id, session_token, jwt_token_id, device_info, ip_address, expires_at, created_at, last_used_at
`

func (q *Queries) UpdateSessionLastUsed(ctx context.Context, sessionID uuid.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, updateSessionLastUsed, sessionID)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.SessionToken,
		&i.JwtTokenID,
		&i.DeviceInfo,
		&i.IpAddress,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
