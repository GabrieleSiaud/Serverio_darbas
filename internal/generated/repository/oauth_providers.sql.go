// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: oauth_providers.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOAuthProvider = `-- name: DeleteOAuthProvider :exec
DELETE FROM oauth_providers
WHERE user_id = $1 AND provider = $2
`

type DeleteOAuthProviderParams struct {
	UserID   pgtype.UUID
	Provider string
}

func (q *Queries) DeleteOAuthProvider(ctx context.Context, arg DeleteOAuthProviderParams) error {
	_, err := q.db.Exec(ctx, deleteOAuthProvider, arg.UserID, arg.Provider)
	return err
}

const getOAuthProviderByExternalID = `-- name: GetOAuthProviderByExternalID :one
SELECT id, user_id, provider, provider_user_id, provider_username, provider_email, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_providers
WHERE provider = $1 AND provider_user_id = $2
`

type GetOAuthProviderByExternalIDParams struct {
	Provider       string
	ProviderUserID string
}

func (q *Queries) GetOAuthProviderByExternalID(ctx context.Context, arg GetOAuthProviderByExternalIDParams) (OauthProvider, error) {
	row := q.db.QueryRow(ctx, getOAuthProviderByExternalID, arg.Provider, arg.ProviderUserID)
	var i OauthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderUsername,
		&i.ProviderEmail,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthProviderByUser = `-- name: GetOAuthProviderByUser :one
SELECT id, user_id, provider, provider_user_id, provider_username, provider_email, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_providers
WHERE user_id = $1 AND provider = $2
`

type GetOAuthProviderByUserParams struct {
	UserID   pgtype.UUID
	Provider string
}

func (q *Queries) GetOAuthProviderByUser(ctx context.Context, arg GetOAuthProviderByUserParams) (OauthProvider, error) {
	row := q.db.QueryRow(ctx, getOAuthProviderByUser, arg.UserID, arg.Provider)
	var i OauthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderUsername,
		&i.ProviderEmail,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const linkOAuthProvider = `-- name: LinkOAuthProvider :one
INSERT INTO oauth_providers (user_id, provider, provider_user_id, provider_username, provider_email, access_token, refresh_token, token_expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
    ON CONFLICT (provider, provider_user_id) DO UPDATE
                                                    SET access_token = EXCLUDED.access_token,
                                                    refresh_token = EXCLUDED.refresh_token,
                                                    token_expires_at = EXCLUDED.token_expires_at,
                                                    updated_at = NOW()
                                                    RETURNING id, user_id, provider, provider_user_id, provider_username, provider_email, access_token, refresh_token, token_expires_at, created_at, updated_at
`

type LinkOAuthProviderParams struct {
	UserID           pgtype.UUID
	Provider         string
	ProviderUserID   string
	ProviderUsername pgtype.Text
	ProviderEmail    pgtype.Text
	AccessToken      pgtype.Text
	RefreshToken     pgtype.Text
	TokenExpiresAt   pgtype.Timestamptz
}

func (q *Queries) LinkOAuthProvider(ctx context.Context, arg LinkOAuthProviderParams) (OauthProvider, error) {
	row := q.db.QueryRow(ctx, linkOAuthProvider,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.ProviderUsername,
		arg.ProviderEmail,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	var i OauthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderUsername,
		&i.ProviderEmail,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
